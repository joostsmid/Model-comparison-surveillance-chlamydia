inc_m_min_median_1519 = inc_m_min_sorted[,1,round(n_sample*.5)],
inc_m_min_median_2024 = inc_m_min_sorted[,2,round(n_sample*.5)],
inc_m_min_low_1519 = inc_m_min_sorted[,1,round(n_sample*.025)],
inc_m_min_low_2024 = inc_m_min_sorted[,2,round(n_sample*.025)],
inc_m_min_upp_1519 = inc_m_min_sorted[,1,round(n_sample*.975)],
inc_m_min_upp_2024 = inc_m_min_sorted[,2,round(n_sample*.975)],
inc_m_Ali_median_1519 = med.incper.m1,
inc_m_Ali_median_2024 = med.incper.m2,
inc_m_Ali_low_1519 = low.incper.m1,
inc_m_Ali_low_2024 = low.incper.m2,
inc_m_Ali_upp_1519 = high.incper.m1,
inc_m_Ali_upp_2024 = high.incper.m2)
df_inc_f <- data.frame(years=2000:2015,
inc_f_min_median_1519 = inc_f_min_sorted[,1,round(n_sample*.5)],
inc_f_min_median_2024 = inc_f_min_sorted[,2,round(n_sample*.5)],
inc_f_min_low_1519 = inc_f_min_sorted[,1,round(n_sample*.025)],
inc_f_min_low_2024 = inc_f_min_sorted[,2,round(n_sample*.025)],
inc_f_min_upp_1519 = inc_f_min_sorted[,1,round(n_sample*.975)],
inc_f_min_upp_2024 = inc_f_min_sorted[,2,round(n_sample*.975)],
inc_f_Ali_median_1519 = med.incper.f1,
inc_f_Ali_median_2024 = med.incper.f2,
inc_f_Ali_low_1519 = low.incper.f1,
inc_f_Ali_low_2024 = low.incper.f2,
inc_f_Ali_upp_1519 = high.incper.f1,
inc_f_Ali_upp_2024 = high.incper.f2)
inc_m_1519_plot <- ggplot() +
geom_line(data = df_inc_m , aes(x=years, y=inc_m_min_median_1519), col="red") +
geom_ribbon(data=df_inc_m , aes(x=years, ymin=inc_m_min_low_1519, ymax=inc_m_min_upp_1519), fill="red", alpha = .3) +
geom_line(data = df_inc_m , aes(x=years, y=inc_m_Ali_median_1519), col="orange") +
geom_ribbon(data=df_inc_m , aes(x=years, ymin=inc_m_Ali_low_1519, ymax=inc_m_Ali_upp_1519), fill="orange", alpha = .3) +
labs(x = "Years") +
labs(y = "Incidence rate") +
ggtitle("men 15-19y (using minimum estimates)") +
annotate(geom="text", x=2013.5, y=0.005, label="Lewis",color="red") +
annotate(geom="text", x=2013.5, y=0, label="Ali",color="orange") +
coord_cartesian(ylim=c(0,max(df_inc_m[,-1]))) +
theme_bw(base_family = "Times") +
theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.key = element_blank())
inc_m_2024_plot <- ggplot() +
geom_line(data = df_inc_m , aes(x=years, y=inc_m_min_median_2024), col="red") +
geom_ribbon(data=df_inc_m , aes(x=years, ymin=inc_m_min_low_2024, ymax=inc_m_min_upp_2024), fill="red", alpha = .3) +
geom_line(data = df_inc_m , aes(x=years, y=inc_m_Ali_median_2024), col="orange") +
geom_ribbon(data=df_inc_m , aes(x=years, ymin=inc_m_Ali_low_2024, ymax=inc_m_Ali_upp_2024), fill="orange", alpha = .3) +
labs(x = "Years") +
labs(y = "Incidence rate") +
ggtitle("men 20-24y (using minimum estimates)") +
annotate(geom="text", x=2013.5, y=0.005, label="Lewis",color="red") +
annotate(geom="text", x=2013.5, y=0, label="Ali",color="orange") +
coord_cartesian(ylim=c(0,max(df_inc_m[,-1]))) +
theme_bw(base_family = "Times") +
theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.key = element_blank())
inc_f_1519_plot <- ggplot() +
geom_line(data = df_inc_f , aes(x=years, y=inc_f_min_median_1519), col="red") +
geom_ribbon(data=df_inc_f , aes(x=years, ymin=inc_f_min_low_1519, ymax=inc_f_min_upp_1519), fill="red", alpha = .3) +
geom_line(data = df_inc_f , aes(x=years, y=inc_f_Ali_median_1519), col="orange") +
geom_ribbon(data=df_inc_f , aes(x=years, ymin=inc_f_Ali_low_1519, ymax=inc_f_Ali_upp_1519), fill="orange", alpha = .3) +
labs(x = "Years") +
labs(y = "Incidence rate") +
ggtitle("women 15-19y (using minimum estimates)") +
annotate(geom="text", x=2013.5, y=0.005, label="Lewis",color="red") +
annotate(geom="text", x=2013.5, y=0, label="Ali",color="orange") +
coord_cartesian(ylim=c(0,max(df_inc_f[,-1]))) +
theme_bw(base_family = "Times") +
theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.key = element_blank())
inc_f_2024_plot <- ggplot() +
geom_line(data = df_inc_f , aes(x=years, y=inc_f_min_median_2024), col="red") +
geom_ribbon(data=df_inc_f , aes(x=years, ymin=inc_f_min_low_2024, ymax=inc_f_min_upp_2024), fill="red", alpha = .3) +
geom_line(data = df_inc_f , aes(x=years, y=inc_f_Ali_median_2024), col="orange") +
geom_ribbon(data=df_inc_f , aes(x=years, ymin=inc_f_Ali_low_2024, ymax=inc_f_Ali_upp_2024), fill="orange", alpha = .3) +
labs(x = "Years") +
labs(y = "Incidence rate") +
ggtitle("women 20-24y (using minimum estimates)") +
annotate(geom="text", x=2013.5, y=0.005, label="Lewis",color="red") +
annotate(geom="text", x=2013.5, y=0, label="Ali",color="orange") +
coord_cartesian(ylim=c(0,max(df_inc_f[,-1]))) +
theme_bw(base_family = "Times") +
theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.key = element_blank())
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
pdf(paste0("figures/Incidence_Lewis_Ali_",dataset,".pdf"),width=9,height=9)
multiplot(plotlist=list(inc_f_1519_plot,inc_f_2024_plot,
inc_m_1519_plot, inc_m_2024_plot), layout=matrix(1:4, nrow=2, byrow=TRUE))
dev.off()
#########################################################
### Prevalence
##########################################################
med.prev.m1 <- rep(NA, nyears)
med.prev.m2 <- rep(NA, nyears)
low.prev.m1 <- rep(NA, nyears)
low.prev.m2 <- rep(NA, nyears)
high.prev.m1 <- rep(NA, nyears)
high.prev.m2 <- rep(NA, nyears)
med.prev.f1 <- rep(NA, nyears)
med.prev.f2 <- rep(NA, nyears)
low.prev.f1 <- rep(NA, nyears)
low.prev.f2 <- rep(NA, nyears)
high.prev.f1 <- rep(NA, nyears)
high.prev.f2 <- rep(NA, nyears)
for (i in 1:nyears) {
med.prev.m1[i] <- myquantile(mock.prev.m[,i,1])[2]
med.prev.m2[i] <- myquantile(mock.prev.m[,i,2])[2]
low.prev.m1[i] <- myquantile(mock.prev.m[,i,1])[1]
low.prev.m2[i] <- myquantile(mock.prev.m[,i,2])[1]
high.prev.m1[i] <- myquantile(mock.prev.m[,i,1])[3]
high.prev.m2[i] <- myquantile(mock.prev.m[,i,2])[3]
med.prev.f1[i] <- myquantile(mock.prev.f[,i,1])[2]
med.prev.f2[i] <- myquantile(mock.prev.f[,i,2])[2]
low.prev.f1[i] <- myquantile(mock.prev.f[,i,1])[1]
low.prev.f2[i] <- myquantile(mock.prev.f[,i,2])[1]
high.prev.f1[i] <- myquantile(mock.prev.f[,i,1])[3]
high.prev.f2[i] <- myquantile(mock.prev.f[,i,2])[3]
}
df_prev_m_min <- data.frame(years=2000:2015,
prev_m_1519_min_median = prev_m_min_sorted[,1,round(n_sample*.5)],
prev_m_2024_min_median = prev_m_min_sorted[,2,round(n_sample*.5)],
prev_m_1519_min_low = prev_m_min_sorted[,1,round(n_sample*.025)],
prev_m_2024_min_low = prev_m_min_sorted[,2,round(n_sample*.025)],
prev_m_1519_min_upp = prev_m_min_sorted[,1,round(n_sample*.975)],
prev_m_2024_min_upp = prev_m_min_sorted[,2,round(n_sample*.975)],
prev_m_Ali_median_1519 = med.prev.m1,
prev_m_Ali_median_2024 = med.prev.m2,
prev_m_Ali_low_1519 = low.prev.m1,
prev_m_Ali_low_2024 = low.prev.m2,
prev_m_Ali_upp_1519 = high.prev.m1,
prev_m_Ali_upp_2024 = high.prev.m2)
df_prev_f_min <- data.frame(years=2000:2015,
prev_f_1519_min_median = prev_f_min_sorted[,1,round(n_sample*.5)],
prev_f_2024_min_median = prev_f_min_sorted[,2,round(n_sample*.5)],
prev_f_1519_min_low = prev_f_min_sorted[,1,round(n_sample*.025)],
prev_f_2024_min_low = prev_f_min_sorted[,2,round(n_sample*.025)],
prev_f_1519_min_upp = prev_f_min_sorted[,1,round(n_sample*.975)],
prev_f_2024_min_upp = prev_f_min_sorted[,2,round(n_sample*.975)],
prev_f_Ali_median_1519 = med.prev.f1,
prev_f_Ali_median_2024 = med.prev.f2,
prev_f_Ali_low_1519 = low.prev.f1,
prev_f_Ali_low_2024 = low.prev.f2,
prev_f_Ali_upp_1519 = high.prev.f1,
prev_f_Ali_upp_2024 = high.prev.f2)
prev_m_1519_plot <- ggplot() +
geom_line(data = df_prev_m_min , aes(x=years, y=prev_m_1519_min_median), col="red") +
geom_ribbon(data=df_prev_m_min , aes(x=years, ymin=prev_m_1519_min_low, ymax=prev_m_1519_min_upp), fill="red", alpha = .3) +
geom_line(data = df_prev_m_min , aes(x=years, y=prev_m_Ali_median_1519), col="orange") +
geom_ribbon(data=df_prev_m_min , aes(x=years, ymin=prev_m_Ali_low_1519, ymax=prev_m_Ali_upp_1519), fill="orange", alpha = .3) +
labs(x = "Years") +
labs(y = "Prevalence") +
ggtitle("men 15-19 (using minimum estimates)") +
annotate(geom="text", x=2013.5, y=0.005, label="Lewis",color="red") +
annotate(geom="text", x=2013.5, y=0, label="Ali",color="orange") +
coord_cartesian(ylim=c(0,0.08)) +
theme_bw(base_family = "Times") +
theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.key = element_blank())
prev_m_2024_plot <- ggplot() +
geom_line(data = df_prev_m_min , aes(x=years, y=prev_m_2024_min_median), col="red") +
geom_ribbon(data=df_prev_m_min , aes(x=years, ymin=prev_m_2024_min_low, ymax=prev_m_2024_min_upp), fill="red", alpha = .3) +
geom_line(data = df_prev_m_min , aes(x=years, y=prev_m_Ali_median_2024), col="orange") +
geom_ribbon(data=df_prev_m_min , aes(x=years, ymin=prev_m_Ali_low_2024, ymax=prev_m_Ali_upp_2024), fill="orange", alpha = .3) +
labs(x = "Years") +
labs(y = "Prevalence") +
ggtitle("men 20-24 (using minimum estimates)") +
annotate(geom="text", x=2013.5, y=0.005, label="Lewis",color="red") +
annotate(geom="text", x=2013.5, y=0, label="Ali",color="orange") +
coord_cartesian(ylim=c(0,0.08)) +
theme_bw(base_family = "Times") +
theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.key = element_blank())
prev_f_1519_plot <- ggplot() +
geom_line(data = df_prev_f_min , aes(x=years, y=prev_f_1519_min_median), col="red") +
geom_ribbon(data=df_prev_f_min , aes(x=years, ymin=prev_f_1519_min_low, ymax=prev_f_1519_min_upp), fill="red", alpha = .3) +
geom_line(data = df_prev_f_min , aes(x=years, y=prev_f_Ali_median_1519), col="orange") +
geom_ribbon(data=df_prev_f_min , aes(x=years, ymin=prev_f_Ali_low_1519, ymax=prev_f_Ali_upp_1519), fill="orange", alpha = .3) +
labs(x = "Years") +
labs(y = "Prevalence") +
ggtitle("women 15-19 (using minimum estimates)") +
annotate(geom="text", x=2013.5, y=0.005, label="Lewis",color="red") +
annotate(geom="text", x=2013.5, y=0, label="Ali",color="orange") +
coord_cartesian(ylim=c(0,0.08)) +
theme_bw(base_family = "Times") +
theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.key = element_blank())
prev_f_2024_plot <- ggplot() +
geom_line(data = df_prev_f_min , aes(x=years, y=prev_f_2024_min_median), col="red") +
geom_ribbon(data=df_prev_f_min , aes(x=years, ymin=prev_f_2024_min_low, ymax=prev_f_2024_min_upp), fill="red", alpha = .3) +
geom_line(data = df_prev_f_min , aes(x=years, y=prev_f_Ali_median_2024), col="orange") +
geom_ribbon(data=df_prev_f_min , aes(x=years, ymin=prev_f_Ali_low_2024, ymax=prev_f_Ali_upp_2024), fill="orange", alpha = .3) +
labs(x = "Years") +
labs(y = "Prevalence") +
ggtitle("women 20-24 (using minimum estimates)") +
annotate(geom="text", x=2013.5, y=0.005, label="Lewis",color="red") +
annotate(geom="text", x=2013.5, y=0, label="Ali",color="orange") +
coord_cartesian(ylim=c(0,0.08)) +
theme_bw(base_family = "Times") +
theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.key = element_blank())
pdf(paste0("figures/Prevalence_Lewis_Ali_",dataset,".pdf"),width=9,height=9)
multiplot(plotlist=list(prev_m_1519_plot, prev_f_1519_plot, prev_m_2024_plot, prev_f_2024_plot), layout=matrix(1:4, nrow=2, byrow=TRUE))
dev.off()
dataset
pdf(paste0("figures/Incidence_Lewis_Ali_",dataset,".pdf"),width=9,height=9)
multiplot(plotlist=list(inc_m_1519_plot,inc_f_1519_plot,
inc_m_2024_plot,inc_f_2024_plot), layout=matrix(1:4, nrow=2, byrow=TRUE))
dev.off()
# Code to compare the model outputs of Lewis and White to those produced by model of Ali et al.
##################################################################################
# maximum for the English data of Chandra et al (eurosurveillance, 2017)
##################################################################################
dataset <-"maxdata"
##################################################################################
# first run the model of Lewis/White (generates results both for maxdata and mindata)
##################################################################################
setwd(file.path(getwd(),"Lewis"))
source("run_Lewis.R")
##################################################################################
# then run the model of Ali/Cameron (generates results only for maxdata or mindata)
##################################################################################
setwd(file.path(getwd(),".."))
setwd(file.path(getwd(),"Ali"))
#either run the whole model of Ali/Cameron (more extensive instructions are found on https://github.com/leftygray/Chlamydia_incidence_model/blob/master/README.md)
# source("abc.run.abc.R")
# source("abc.posterior.processing.R")
# source("abc.plot.results.R") # also plots results, not necessary for model comparison
#or immediately use the saved outputs of the model when ran on the English data
load(file.path("output",paste0("posterior_",dataset,".dat")))
source("code/load.library.R")
source("code/abc.read.in.data.R")
med.incper.m1 <- rep(NA, nyears)
med.incper.m2 <- rep(NA, nyears)
low.incper.m1 <- rep(NA, nyears)
low.incper.m2 <- rep(NA, nyears)
high.incper.m1 <- rep(NA, nyears)
high.incper.m2 <- rep(NA, nyears)
med.incper.f1 <- rep(NA, nyears)
med.incper.f2 <- rep(NA, nyears)
low.incper.f1 <- rep(NA, nyears)
low.incper.f2 <- rep(NA, nyears)
high.incper.f1 <- rep(NA, nyears)
high.incper.f2 <- rep(NA, nyears)
myquantile <- function(x) quantile(x, probs = c(0.025, .5, 0.975), na.rm = T)
for (i in 1:nyears) {
med.incper.m1[i] <- myquantile(mock.inc.m[,i,1])[2]/m.15.19[i]
med.incper.m2[i] <- myquantile(mock.inc.m[,i,2])[2]/m.20.24[i]
low.incper.m1[i] <- myquantile(mock.inc.m[,i,1])[1]/m.15.19[i]
low.incper.m2[i] <- myquantile(mock.inc.m[,i,2])[1]/m.20.24[i]
high.incper.m1[i] <- myquantile(mock.inc.m[,i,1])[3]/m.15.19[i]
high.incper.m2[i] <- myquantile(mock.inc.m[,i,2])[3]/m.20.24[i]
med.incper.f1[i] <- myquantile(mock.inc.f[,i,1])[2]/f.15.19[i]
med.incper.f2[i] <- myquantile(mock.inc.f[,i,2])[2]/f.20.24[i]
low.incper.f1[i] <- myquantile(mock.inc.f[,i,1])[1]/f.15.19[i]
low.incper.f2[i] <- myquantile(mock.inc.f[,i,2])[1]/f.20.24[i]
high.incper.f1[i] <- myquantile(mock.inc.f[,i,1])[3]/f.15.19[i]
high.incper.f2[i] <- myquantile(mock.inc.f[,i,2])[3]/f.20.24[i]
}
###############################################################################################################
# compare the results of both models
##################################################################################
setwd(file.path(getwd(),".."))
df_inc_m <- data.frame(years=2000:2015,
inc_m_max_median_1519 = inc_m_max_sorted[,1,round(n_sample*.5)],
inc_m_max_median_2024 = inc_m_max_sorted[,2,round(n_sample*.5)],
inc_m_max_low_1519 = inc_m_max_sorted[,1,round(n_sample*.025)],
inc_m_max_low_2024 = inc_m_max_sorted[,2,round(n_sample*.025)],
inc_m_max_upp_1519 = inc_m_max_sorted[,1,round(n_sample*.975)],
inc_m_max_upp_2024 = inc_m_max_sorted[,2,round(n_sample*.975)],
inc_m_Ali_median_1519 = med.incper.m1,
inc_m_Ali_median_2024 = med.incper.m2,
inc_m_Ali_low_1519 = low.incper.m1,
inc_m_Ali_low_2024 = low.incper.m2,
inc_m_Ali_upp_1519 = high.incper.m1,
inc_m_Ali_upp_2024 = high.incper.m2)
df_inc_f <- data.frame(years=2000:2015,
inc_f_max_median_1519 = inc_f_max_sorted[,1,round(n_sample*.5)],
inc_f_max_median_2024 = inc_f_max_sorted[,2,round(n_sample*.5)],
inc_f_max_low_1519 = inc_f_max_sorted[,1,round(n_sample*.025)],
inc_f_max_low_2024 = inc_f_max_sorted[,2,round(n_sample*.025)],
inc_f_max_upp_1519 = inc_f_max_sorted[,1,round(n_sample*.975)],
inc_f_max_upp_2024 = inc_f_max_sorted[,2,round(n_sample*.975)],
inc_f_Ali_median_1519 = med.incper.f1,
inc_f_Ali_median_2024 = med.incper.f2,
inc_f_Ali_low_1519 = low.incper.f1,
inc_f_Ali_low_2024 = low.incper.f2,
inc_f_Ali_upp_1519 = high.incper.f1,
inc_f_Ali_upp_2024 = high.incper.f2)
inc_m_1519_plot <- ggplot() +
geom_line(data = df_inc_m , aes(x=years, y=inc_m_max_median_1519), col="red") +
geom_ribbon(data=df_inc_m , aes(x=years, ymin=inc_m_max_low_1519, ymax=inc_m_max_upp_1519), fill="red", alpha = .3) +
geom_line(data = df_inc_m , aes(x=years, y=inc_m_Ali_median_1519), col="orange") +
geom_ribbon(data=df_inc_m , aes(x=years, ymin=inc_m_Ali_low_1519, ymax=inc_m_Ali_upp_1519), fill="orange", alpha = .3) +
labs(x = "Years") +
labs(y = "Incidence rate") +
ggtitle("men 15-19y (using maximum estimates)") +
annotate(geom="text", x=2013.5, y=0.005, label="Lewis",color="red") +
annotate(geom="text", x=2013.5, y=0, label="Ali",color="orange") +
coord_cartesian(ylim=c(0,max(df_inc_m[,-1]))) +
theme_bw(base_family = "Times") +
theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.key = element_blank())
inc_m_2024_plot <- ggplot() +
geom_line(data = df_inc_m , aes(x=years, y=inc_m_max_median_2024), col="red") +
geom_ribbon(data=df_inc_m , aes(x=years, ymin=inc_m_max_low_2024, ymax=inc_m_max_upp_2024), fill="red", alpha = .3) +
geom_line(data = df_inc_m , aes(x=years, y=inc_m_Ali_median_2024), col="orange") +
geom_ribbon(data=df_inc_m , aes(x=years, ymin=inc_m_Ali_low_2024, ymax=inc_m_Ali_upp_2024), fill="orange", alpha = .3) +
labs(x = "Years") +
labs(y = "Incidence rate") +
ggtitle("men 20-24y (using maximum estimates)") +
annotate(geom="text", x=2013.5, y=0.005, label="Lewis",color="red") +
annotate(geom="text", x=2013.5, y=0, label="Ali",color="orange") +
coord_cartesian(ylim=c(0,max(df_inc_m[,-1]))) +
theme_bw(base_family = "Times") +
theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.key = element_blank())
inc_f_1519_plot <- ggplot() +
geom_line(data = df_inc_f , aes(x=years, y=inc_f_max_median_1519), col="red") +
geom_ribbon(data=df_inc_f , aes(x=years, ymin=inc_f_max_low_1519, ymax=inc_f_max_upp_1519), fill="red", alpha = .3) +
geom_line(data = df_inc_f , aes(x=years, y=inc_f_Ali_median_1519), col="orange") +
geom_ribbon(data=df_inc_f , aes(x=years, ymin=inc_f_Ali_low_1519, ymax=inc_f_Ali_upp_1519), fill="orange", alpha = .3) +
labs(x = "Years") +
labs(y = "Incidence rate") +
ggtitle("women 15-19y (using maximum estimates)") +
annotate(geom="text", x=2013.5, y=0.005, label="Lewis",color="red") +
annotate(geom="text", x=2013.5, y=0, label="Ali",color="orange") +
coord_cartesian(ylim=c(0,max(df_inc_f[,-1]))) +
theme_bw(base_family = "Times") +
theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.key = element_blank())
inc_f_2024_plot <- ggplot() +
geom_line(data = df_inc_f , aes(x=years, y=inc_f_max_median_2024), col="red") +
geom_ribbon(data=df_inc_f , aes(x=years, ymin=inc_f_max_low_2024, ymax=inc_f_max_upp_2024), fill="red", alpha = .3) +
geom_line(data = df_inc_f , aes(x=years, y=inc_f_Ali_median_2024), col="orange") +
geom_ribbon(data=df_inc_f , aes(x=years, ymin=inc_f_Ali_low_2024, ymax=inc_f_Ali_upp_2024), fill="orange", alpha = .3) +
labs(x = "Years") +
labs(y = "Incidence rate") +
ggtitle("women 20-24y (using maximum estimates)") +
annotate(geom="text", x=2013.5, y=0.005, label="Lewis",color="red") +
annotate(geom="text", x=2013.5, y=0, label="Ali",color="orange") +
coord_cartesian(ylim=c(0,max(df_inc_f[,-1]))) +
theme_bw(base_family = "Times") +
theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.key = element_blank())
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
pdf(paste0("figures/Incidence_Lewis_Ali_",dataset,".pdf"),width=9,height=9)
multiplot(plotlist=list(inc_m_1519_plot,inc_f_1519_plot,
inc_m_2024_plot,inc_f_2024_plot), layout=matrix(1:4, nrow=2, byrow=TRUE))
dev.off()
#########################################################
### Prevalence
##########################################################
med.prev.m1 <- rep(NA, nyears)
med.prev.m2 <- rep(NA, nyears)
low.prev.m1 <- rep(NA, nyears)
low.prev.m2 <- rep(NA, nyears)
high.prev.m1 <- rep(NA, nyears)
high.prev.m2 <- rep(NA, nyears)
med.prev.f1 <- rep(NA, nyears)
med.prev.f2 <- rep(NA, nyears)
low.prev.f1 <- rep(NA, nyears)
low.prev.f2 <- rep(NA, nyears)
high.prev.f1 <- rep(NA, nyears)
high.prev.f2 <- rep(NA, nyears)
for (i in 1:nyears) {
med.prev.m1[i] <- myquantile(mock.prev.m[,i,1])[2]
med.prev.m2[i] <- myquantile(mock.prev.m[,i,2])[2]
low.prev.m1[i] <- myquantile(mock.prev.m[,i,1])[1]
low.prev.m2[i] <- myquantile(mock.prev.m[,i,2])[1]
high.prev.m1[i] <- myquantile(mock.prev.m[,i,1])[3]
high.prev.m2[i] <- myquantile(mock.prev.m[,i,2])[3]
med.prev.f1[i] <- myquantile(mock.prev.f[,i,1])[2]
med.prev.f2[i] <- myquantile(mock.prev.f[,i,2])[2]
low.prev.f1[i] <- myquantile(mock.prev.f[,i,1])[1]
low.prev.f2[i] <- myquantile(mock.prev.f[,i,2])[1]
high.prev.f1[i] <- myquantile(mock.prev.f[,i,1])[3]
high.prev.f2[i] <- myquantile(mock.prev.f[,i,2])[3]
}
df_prev_m_max <- data.frame(years=2000:2015,
prev_m_1519_max_median = prev_m_max_sorted[,1,round(n_sample*.5)],
prev_m_2024_max_median = prev_m_max_sorted[,2,round(n_sample*.5)],
prev_m_1519_max_low = prev_m_max_sorted[,1,round(n_sample*.025)],
prev_m_2024_max_low = prev_m_max_sorted[,2,round(n_sample*.025)],
prev_m_1519_max_upp = prev_m_max_sorted[,1,round(n_sample*.975)],
prev_m_2024_max_upp = prev_m_max_sorted[,2,round(n_sample*.975)],
prev_m_Ali_median_1519 = med.prev.m1,
prev_m_Ali_median_2024 = med.prev.m2,
prev_m_Ali_low_1519 = low.prev.m1,
prev_m_Ali_low_2024 = low.prev.m2,
prev_m_Ali_upp_1519 = high.prev.m1,
prev_m_Ali_upp_2024 = high.prev.m2)
df_prev_f_max <- data.frame(years=2000:2015,
prev_f_1519_max_median = prev_f_max_sorted[,1,round(n_sample*.5)],
prev_f_2024_max_median = prev_f_max_sorted[,2,round(n_sample*.5)],
prev_f_1519_max_low = prev_f_max_sorted[,1,round(n_sample*.025)],
prev_f_2024_max_low = prev_f_max_sorted[,2,round(n_sample*.025)],
prev_f_1519_max_upp = prev_f_max_sorted[,1,round(n_sample*.975)],
prev_f_2024_max_upp = prev_f_max_sorted[,2,round(n_sample*.975)],
prev_f_Ali_median_1519 = med.prev.f1,
prev_f_Ali_median_2024 = med.prev.f2,
prev_f_Ali_low_1519 = low.prev.f1,
prev_f_Ali_low_2024 = low.prev.f2,
prev_f_Ali_upp_1519 = high.prev.f1,
prev_f_Ali_upp_2024 = high.prev.f2)
prev_m_1519_plot <- ggplot() +
geom_line(data = df_prev_m_max , aes(x=years, y=prev_m_1519_max_median), col="red") +
geom_ribbon(data=df_prev_m_max , aes(x=years, ymin=prev_m_1519_max_low, ymax=prev_m_1519_max_upp), fill="red", alpha = .3) +
geom_line(data = df_prev_m_max , aes(x=years, y=prev_m_Ali_median_1519), col="orange") +
geom_ribbon(data=df_prev_m_max , aes(x=years, ymin=prev_m_Ali_low_1519, ymax=prev_m_Ali_upp_1519), fill="orange", alpha = .3) +
labs(x = "Years") +
labs(y = "Prevalence") +
ggtitle("men 15-19 (using maximum estimates)") +
annotate(geom="text", x=2013.5, y=0.005, label="Lewis",color="red") +
annotate(geom="text", x=2013.5, y=0, label="Ali",color="orange") +
coord_cartesian(ylim=c(0,0.08)) +
theme_bw(base_family = "Times") +
theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.key = element_blank())
prev_m_2024_plot <- ggplot() +
geom_line(data = df_prev_m_max , aes(x=years, y=prev_m_2024_max_median), col="red") +
geom_ribbon(data=df_prev_m_max , aes(x=years, ymin=prev_m_2024_max_low, ymax=prev_m_2024_max_upp), fill="red", alpha = .3) +
geom_line(data = df_prev_m_max , aes(x=years, y=prev_m_Ali_median_2024), col="orange") +
geom_ribbon(data=df_prev_m_max , aes(x=years, ymin=prev_m_Ali_low_2024, ymax=prev_m_Ali_upp_2024), fill="orange", alpha = .3) +
labs(x = "Years") +
labs(y = "Prevalence") +
ggtitle("men 20-24 (using maximum estimates)") +
annotate(geom="text", x=2013.5, y=0.005, label="Lewis",color="red") +
annotate(geom="text", x=2013.5, y=0, label="Ali",color="orange") +
coord_cartesian(ylim=c(0,0.08)) +
theme_bw(base_family = "Times") +
theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.key = element_blank())
prev_f_1519_plot <- ggplot() +
geom_line(data = df_prev_f_max , aes(x=years, y=prev_f_1519_max_median), col="red") +
geom_ribbon(data=df_prev_f_max , aes(x=years, ymin=prev_f_1519_max_low, ymax=prev_f_1519_max_upp), fill="red", alpha = .3) +
geom_line(data = df_prev_f_max , aes(x=years, y=prev_f_Ali_median_1519), col="orange") +
geom_ribbon(data=df_prev_f_max , aes(x=years, ymin=prev_f_Ali_low_1519, ymax=prev_f_Ali_upp_1519), fill="orange", alpha = .3) +
labs(x = "Years") +
labs(y = "Prevalence") +
annotate(geom="text", x=2013.5, y=0.005, label="Lewis",color="red") +
annotate(geom="text", x=2013.5, y=0, label="Ali",color="orange") +
ggtitle("women 15-19 (using maximum estimates)") +
coord_cartesian(ylim=c(0,0.08)) +
theme_bw(base_family = "Times") +
theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.key = element_blank())
prev_f_2024_plot <- ggplot() +
geom_line(data = df_prev_f_max , aes(x=years, y=prev_f_2024_max_median), col="red") +
geom_ribbon(data=df_prev_f_max , aes(x=years, ymin=prev_f_2024_max_low, ymax=prev_f_2024_max_upp), fill="red", alpha = .3) +
geom_line(data = df_prev_f_max , aes(x=years, y=prev_f_Ali_median_2024), col="orange") +
geom_ribbon(data=df_prev_f_max , aes(x=years, ymin=prev_f_Ali_low_2024, ymax=prev_f_Ali_upp_2024), fill="orange", alpha = .3) +
labs(x = "Years") +
labs(y = "Prevalence") +
annotate(geom="text", x=2013.5, y=0.005, label="Lewis",color="red") +
annotate(geom="text", x=2013.5, y=0, label="Ali",color="orange") +
ggtitle("women 20-24 (using maximum estimates)") +
coord_cartesian(ylim=c(0,0.08)) +
theme_bw(base_family = "Times") +
theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.key = element_blank())
pdf(paste0("figures/Prevalence_Lewis_Ali_",dataset,".pdf"),width=9,height=9)
multiplot(plotlist=list(prev_m_1519_plot, prev_f_1519_plot, prev_m_2024_plot, prev_f_2024_plot), layout=matrix(1:4, nrow=2, byrow=TRUE))
dev.off()
# Code to compare the model outputs of Lewis and White to those produced by model of Ali et al.
##################################################################################
# maximum for the English data of Chandra et al (eurosurveillance, 2017)
##################################################################################
dataset <-"maxdata"
##################################################################################
# first run the model of Lewis/White (generates results both for maxdata and mindata)
##################################################################################
setwd(file.path(getwd(),"Lewis"))
source("run_Lewis.R")
##################################################################################
# then run the model of Ali/Cameron (generates results only for maxdata or mindata)
##################################################################################
setwd(file.path(getwd(),".."))
setwd(file.path(getwd(),"Ali"))
source("abc.run.abc.R")
